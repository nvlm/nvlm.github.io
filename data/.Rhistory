x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
g=2  # g=1: le groupe de la mort !
n=500  # nombre de tirages
xt= c()  # prepare les scores moyens transformes
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
hist(xt)  # ça a l'air normal, même pour g=1
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
setwd("/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD")
list.files(getwd())
setwd("/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data")
list.files(getwd())
read.csv("pts_buff.csv", header=TRUE, sep=";")
pts_buff = read.csv("pts_buff.csv", header=TRUE, sep=";")
pts_buff = data.frame(read.csv("pts_buff.csv", header=TRUE, sep=";"))
View(pts_buff)
pts_buff = data.frame(read.csv("pts_buff.csv", header=TRUE, sep=","))
plot(pts_buff$MOYEN_TRAN)
plot(pts_buff$buff100_SU)
hist(pts_buff$buff100_SU)
hist(pts_buff$buff250_SU)
hist(pts_buff$buff500_SU)
hist(pts_buff$buff1000_S)
plot(pts_buff$buff100_SU)
plot(pts_buff$buff100_SU, pts_buff$buff500_SU)
sort(pts_buff$buff1000_S, decreasing)
sort(pts_buff$buff1000_S, decreasing = TRUE)
plot(pts_buff$buff100_SU, sort(pts_buff$buff1000_S, decreasing = TRUE))
rank = sort(pts_buff$buff1000_S, decreasing = TRUE)
length(rank)
length(pts_buff)
length(pts_buff$buff1000_S)
pts_buff[is.na(pts_buff)] <- 0
length(rank)
length(pts_buff$buff1000_S)
rank = sort(pts_buff$buff1000_S, decreasing = TRUE)
length(rank)
plot(pts_buff$buff100_SU, sort(pts_buff$buff1000_S, decreasing = TRUE))
plot(pts_buff$buff1000_S, sort(pts_buff$buff1000_S, decreasing = TRUE))
plot(pts_buff$buff1000_S, sort(pts_buff$buff1000_S, decreasing = TRUE))
plot(sort(pts_buff$buff1000_S, decreasing = TRUE), pts_buff$buff1000_S)
sort(pts_buff$buff1000_S, decreasing = TRUE)
plot(rank, pts_buff$buff1000_S)
?vector
rank = vector(mode = "numeric", length = 2375)
for i in (1:2375) {
rank[i] = i
}
for (i in 1:2375) {
rank[i] = i
}
rank
plot(rank, pts_buff$buff1000_S)
ranking = sort(pts_buff$buff1000_S, decreasing = TRUE)
plot(rank, ranking)
plot(rank, ranking100)
ranking100 = sort(pts_buff$buff100_SU, decreasing = TRUE)
ranking250 = sort(pts_buff$buff250_SU, decreasing = TRUE)
ranking500 = sort(pts_buff$buff500_SU, decreasing = TRUE)
ranking1000 = sort(pts_buff$buff1000_S, decreasing = TRUE)
plot(rank, ranking100)
plot(rank, ranking250)
plot(rank, ranking500)
plot(rank, ranking1000)
plot(rank, ranking100)
plot(rank, ranking250)
plot(rank, ranking500)
plot(rank, ranking1000)
plot(rank, ln(ranking100))
plot(rank, ln(ranking100))
plot(rank, log(ranking100))
plot(log(rank), log(ranking100))
plot(rank, log(ranking100))
plot(rank, log(ranking250))
plot(rank, log(ranking500))
plot(rank, log(ranking100))
plot(rank, log(ranking250))
plot(rank, log(ranking100))
plot(rank, log(ranking250))
plot(rank, log(ranking500))
plot(rank, log(ranking1000))
plot(rank, log(ranking100))
plot(rank, log(ranking250))
plot(rank, log(ranking500))
plot(rank, log(ranking1000))
source('~/Desktop/-MyFucknUnil-/DataViz/TPVD/data/Untitled.R')
s_buff = data.frame(read.csv("s_buff.csv",  header=TRUE, sep=","))
m_buff = data.frame(read.csv("m_buff.csv",  header=TRUE, sep=","))
l_buff = data.frame(read.csv("l_buff.csv",  header=TRUE, sep=","))
pts_buff[is.na(pts_buff)] <- 0
s_buff[is.na(pts_buff)] <- 0
m_buff[is.na(pts_buff)] <- 0
l_buff[is.na(pts_buff)] <- 0
pts_buff[is.na(pts_buff)] <- 0
s_buff[is.na(s_buff)] <- 0
m_buff[is.na(m_buff)] <- 0
l_buff[is.na(l_buff)] <- 0
hist(s_buff$buff100_SU)
hist(m_buff$buff100_SU)
hist(l_buff$buff100_SU)
hist(s_buff$buff1000_S)
hist(m_buff$buff1000_S)
hist(l_buff$buff1000_S)
plot(rank_all, log(ranking100))
plot(rank_all, log(ranking250))
rank_all = vector(mode = "numeric", length = 2375)
rank_all = vector(mode = "numeric", length = 2375)
for (i in 1:2375) {
rank_all[i] = i
}
plot(rank_all, log(ranking100))
plot(rank_all, log(ranking250))
plot(rank_all, log(ranking500))
plot(rank_all, log(ranking1000))
plot(rank_all, log(ranking100))
plot(rank_all, log(ranking250))
plot(rank_all, log(ranking500))
plot(rank_all, log(ranking1000))
plot(rank_all, log(ranking100))
plot(rank_all, log(ranking250))
plot(rank_all, log(ranking500))
plot(rank_all, log(ranking1000))
plot(rank_all, log(ranking100))
plot(rank_all, log(ranking250))
plot(rank_all, log(ranking500))
