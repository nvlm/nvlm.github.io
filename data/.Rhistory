for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
xt = vector(mode = "numeric", length = 10)
for (i in 1:10){
x = rt(n,g) #avec n = 500 et g = ta_valeur
x_moyenne = mean(x)
sx2=mean(x^2)-mean(x)^2 # variance
sx= sqrt(sx2) #ecart type
xt[i] = sqrt(n)*x_moyenne/sx #sauvegarde des valeurs dans un vecteur
}
hist(xt)
g=2  # g=1: le groupe de la mort !
n=500  # nombre de tirages
xt= c()  # prepare les scores moyens transformes
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
hist(xt)  # ça a l'air normal, même pour g=1
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
for(essai in 1:10){ # les étudiants d'utiliseront en principe pas la boucle "for", mais pourront copier 10 fois la même chose
x=rt(n,g)  # tirer 500 valeurs d'un loi de t à g degrés de liberté
xbar=mean(x) # moyenne
sx2=mean(x^2)-mean(x)^2 # variance
sx=sqrt(sx2) # ecart-type
xt[essai]=sqrt(n)*xbar/sx # le score transformé
}
#PERSO
hist(xt)
?read.csv
pts_buff = data.frame(read.csv("pts_buff.csv", header=TRUE, sep=","))
setwd("/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data")
list.files(getwd())
pts_buff = data.frame(read.csv("pts_buff.csv", header=TRUE, sep=","))
buff_Size = 100;
filename = paste("buffer", buff_Size, ".csv", sep= "");
buffer_Val = data.frame(read.csv(filename, header=FALSE, sep=";"))
rownames(buffer_Val) = c("NUMERO", buff_Size)
c("NUMERO", buff_Size)
buffer_Val = data.frame(read.csv(filename, header=FALSE, sep=";"))
colnames(buffer_Val) = c("NUMERO", buff_Size)
merge(pts_buff, buffer_Val, by = "NUMERO")
merged = merge(pts_buff, buffer_Val, by = "NUMERO")
View(merged)
for (i in 1:10){
# Define buff size = index * 100 for meters
buff_Size = i*100;
# Define filename according to current buffer size
filename = paste("buffer", buff_Size, ".csv", sep= "");
# creates dataframe from csv file
buffer_Val = data.frame(read.csv(filename, header=FALSE, sep=";"));
# renames column names for merging
colnames(buffer_Val) = c("NUMERO", buff_Size);
# merging current data with previous version of dataframe
merged = merge(pts_buff, buffer_Val, by = "NUMERO");
}
View(merged)
for (i in 1:10){
# Define buff size = index * 100 for meters
buff_Size = i*100;
# Define filename according to current buffer size
filename = paste("buffer", buff_Size, ".csv", sep= "");
# creates dataframe from csv file
buffer_Val = data.frame(read.csv(filename, header=FALSE, sep=";"));
# renames column names for merging
colnames(buffer_Val) = c("NUMERO", buff_Size);
# merging current data with previous version of dataframe
pts_buff$buff_Size = merge(pts_buff, buffer_Val, by = "NUMERO");
}
pts_buff = data.frame(read.csv("pts_buff.csv", header=TRUE, sep=","))
for (i in 1:10){
# Define buff size = index * 100 for meters
buff_Size = i*100;
# Define filename according to current buffer size
filename = paste("buffer", buff_Size, ".csv", sep= "");
# creates dataframe from csv file
buffer_Val = data.frame(read.csv(filename, header=FALSE, sep=";"));
# renames column names for merging
colnames(buffer_Val) = c("NUMERO", buff_Size);
# merging current data with previous version of dataframe
pts_buff$buff_Size = merge(pts_buff, buffer_Val, by = "NUMERO");
}
View(pts_buff)
View(pts_buff)
pts_buff = data.frame(read.csv("pts_buff.csv", header=TRUE, sep=","))
View(pts_buff)
for (i in 1:10){
# Define buff size = index * 100 for meters
buff_Size = i*100;
# Define filename according to current buffer size
filename = paste("buffer", buff_Size, ".csv", sep= "");
# creates dataframe from csv file
buffer_Val = data.frame(read.csv(filename, header=FALSE, sep=";"));
# renames column names for merging
colnames(buffer_Val) = c("NUMERO", buff_Size);
# merging current data with previous version of dataframe
pts_buff = merge(pts_buff, buffer_Val, by = "NUMERO");
}
buffers = pts_buff$NUMERO, pts_buff$X
buffers = data.frame(pts_buff$NUMERO, pts_buff$X)
buffers
buffers = data.frame(pts_buff$X, pts_buff$Y, pts_buff$NOM, pts_buff$MOYEN_TRAN, pts_buff$ALTITUDE,
pts_buff$NUMERO_COM, pts_buff$NOM_COMMUN, pts_buff$`100`, pts_buff$`200`,
pts_buff$`300`, pts_buff$`400`, pts_buff$`500`, pts_buff$`600`, pts_buff$`700`,
pts_buff$`800`, pts_buff$`1000`)
View(buffers)
write.csv(buffers, file = "/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data/buffers")
write.csv(buffers, file = "/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data/buffers.csv")
write.csv(buffers, file = "/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data/buffers.csv", col.names = TRUE)
write.csv(buffers, file = "/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data/buffers.csv", col.names = FALSE)
write.csv(buffers, file = "/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data/buffers.csv", row.names = FALSE)
write.csv(buffers, file = "/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data/buffers.csv", row.names = FALSE)
write.csv(buffers, file = "/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data/buffers.csv", col.names = FALSE)
write.csv(buffers, file = "/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data/buffers.csv", col.names = TRUE)
write.csv(buffers, file = "/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data/buffers.csv", header = TRUE)
?write.csv()
buffers = c(pts_buff$X, pts_buff$Y, pts_buff$NOM, pts_buff$MOYEN_TRAN, pts_buff$ALTITUDE,
pts_buff$NUMERO_COM, pts_buff$NOM_COMMUN, pts_buff$`100`, pts_buff$`200`,
pts_buff$`300`, pts_buff$`400`, pts_buff$`500`, pts_buff$`600`, pts_buff$`700`,
pts_buff$`800`, pts_buff$`1000`)
buffers = data.frame(pts_buff$X, pts_buff$Y, pts_buff$NOM, pts_buff$MOYEN_TRAN, pts_buff$ALTITUDE,
pts_buff$NUMERO_COM, pts_buff$NOM_COMMUN, pts_buff$`100`, pts_buff$`200`,
pts_buff$`300`, pts_buff$`400`, pts_buff$`500`, pts_buff$`600`, pts_buff$`700`,
pts_buff$`800`, pts_buff$`1000`)
colnames(buffers = c("X", "Y", "NOM", "MOYEN_TRAN", "ALTITUDE", "NUMERO_COM", "NOM_COMMUN", "100m", "200m",
"300m", "400m", "500m", "600m", "700m", "800m", "900m", "1000m"))
colnames(buffers) = c("X", "Y", "NOM", "MOYEN_TRAN", "ALTITUDE", "NUMERO_COM", "NOM_COMMUN", "100m", "200m",
"300m", "400m", "500m", "600m", "700m", "800m", "900m", "1000m")
buffers = data.frame(pts_buff$X, pts_buff$Y, pts_buff$NOM, pts_buff$MOYEN_TRAN, pts_buff$ALTITUDE,
pts_buff$NUMERO_COM, pts_buff$NOM_COMMUN, pts_buff$`100`, pts_buff$`200`,
pts_buff$`300`, pts_buff$`400`, pts_buff$`500`, pts_buff$`600`, pts_buff$`700`,
pts_buff$`800`, pts_buff$`900` pts_buff$`1000`)
buffers = data.frame(pts_buff$X, pts_buff$Y, pts_buff$NOM, pts_buff$MOYEN_TRAN, pts_buff$ALTITUDE,
pts_buff$NUMERO_COM, pts_buff$NOM_COMMUN, pts_buff$`100`, pts_buff$`200`,
pts_buff$`300`, pts_buff$`400`, pts_buff$`500`, pts_buff$`600`, pts_buff$`700`,
pts_buff$`800`, pts_buff$`900`, pts_buff$`1000`)
colnames(buffers) = c("X", "Y", "NOM", "MOYEN_TRAN", "ALTITUDE", "NUMERO_COM", "NOM_COMMUN", "100m", "200m",
"300m", "400m", "500m", "600m", "700m", "800m", "900m", "1000m")
write.csv(buffers, file = "/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data/buffers.csv", header = TRUE)
write.csv(buffers, file = "/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data/buffers.csv")
colnames(buffers) = c("X", "Y", "NOM", "MOYEN_TRAN", "ALTITUDE", "NUMERO_COM", "NOM_COMMUN", "pop100m",
"pop200m", "pop300m", "pop400m", "pop500m", "pop600m", "pop700m", "pop800m",
"pop900m", "pop1000m")
write.csv(buffers, file = "/Users/admin/Desktop/-MyFucknUnil-/DataViz/TPVD/data/buffers.csv")
